/**
 * Copyright (C) 2009-2012 simon <simon@angelcorp.be>
 *
 * Licensed under the Non-Profit Open Software License version 3.0
 * (the "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 * http://www.opensource.org/licenses/NOSL3.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package be.angelcorp.celest.time

import org.scalatest.FlatSpec
import org.scalatest.matchers.ShouldMatchers

class TestTimeUtils extends FlatSpec with ShouldMatchers {

  "TimeUtils" should "compute the correct day of the week" in {
    // Dates generated by http://aa.usno.navy.mil/data/docs/JulianDate.php

    // JD 2499866.800000 is CE 2132 April 20 07:12:00.0 UT Sunday
    TimeUtils.dayOfWeek(2499866.8) should equal(1)
    // JD 2441368.900000 is CE 1972 February 21 09:36:00.0 UT Monday
    TimeUtils.dayOfWeek(2441368.9) should equal(2)
    // JD 2435140.160000 is CE 1955 February 01 15:50:24.0 UT Tuesday
    TimeUtils.dayOfWeek(2435140.16) should equal(3)
    // JD 2452564.000000 is CE 2002 October 16 12:00:00.0 UT Wednesday
    TimeUtils.dayOfWeek(2452564) should equal(4)
    // JD 2454162.500000 is CE 2007 March 03 00:00:00.0 UT Saturday
    TimeUtils.dayOfWeek(2454162.5) should equal(7)
  }

  it should "compute the correct day of the year" in {
    // Fundamentals of Astrodynamics and Applications Example 3-11, page 206
    // May 8, 1992 == 129
    TimeUtils.dayofyear(1992, 5, 8, 0, 0, 0) should be(129.0 plusOrMinus 1E-16)
  }

  it should "compute the correct calender date from the year and day of the year" in {
    // Fundamentals of Astrodynamics and Applications Example 3-12, page 207
    // March 18, 2001 12:14 PM == 77.509722222222222223
    val date = TimeUtils.calenderDate(2001, 77.509722222222222223)
    date._1 should equal(2001) // Year
    date._2 should equal(3) // Month
    date._3 should equal(18) // Day
    date._4 should equal(12) // Hour
    date._5 should equal(14) // Min
    date._6 should be(0.0 plusOrMinus 1E-10) // Sec
  }

  it should "correctly convert degrees/minutes/seconds to radians" in {
    // Fundamentals of Astrodynamics and Applications Example 3-8, page 204
    // -35° -15m -53.63s == -0.6154886 rad
    TimeUtils.dms_rad(-35, -15, -53.63) should be(-0.6154886 plusOrMinus 1E-7)
  }

  it should "compute the correct Julian date" in {
    // Fundamentals of Astrodynamics and Applications Example 3-4, page 190
    // Oct 26, 1996 2:20 PM UT == 2450383.09722222
    TimeUtils.gregorian_jd(1996, 10, 26, 14, 20, 0) should be(2450383.09722222 plusOrMinus 1E-8)
  }

  it should "compute the correct IAU82 greenwich sidereal time" in {
    // Fundamentals of Astrodynamics and Applications Example 3-5, page 194
    // August 20, 1992, 12:14 PM UT1
    val jdut1 = TimeUtils.jday(1992, 8, 20, 12, 14, 0)
    TimeUtils.gstime(jdut1) should be(152.578787886 * (math.Pi / 180.0) plusOrMinus 1E-8)
  }

  it should "correctly convert hour/min/sec to radians" in {
    // Fundamentals of Astrodynamics and Applications Example 3-9, page 205
    // 15h 15m 53.63s == 3.996341 rad
    TimeUtils.hms_rad(15, 15, 53.63) should be(3.996341 plusOrMinus 1E-6)
  }

  it should "correctly convert hours/minutes/seconds of a day to seconds in that day" in {
    // Fundamentals of Astrodynamics and Applications Example 3-10, page 206
    // 13h 22m 45.98s == 48165.98
    TimeUtils.hms_sec(13, 22, 45.98) should be(48165.98 plusOrMinus 1E-6)
  }

  it should "determine the correct calander date from a Julian date" in {
    // Fundamentals of Astrodynamics and Applications Example 3-13, page 209
    // JD 2449877.3458762 == 1995, June 8 20:18:3.70368
    val arr = TimeUtils.invjday(2449877.3458762)
    arr._1 should equal(1995) // Year
    arr._2 should equal(6) // Month
    arr._3 should equal(8) // Day
    arr._4 should equal(20) // Hour
    arr._5 should equal(18) // Minute
    arr._6 should be(3.70368 plusOrMinus 1.2E-5) // Seconds
  }

  it should "compute the correct number of days from J2000.0 for a Julian date" in {
    // Time since 1 januari 2000, 00:00:00 (UTC time); 372802653 seconds
    // http://www.timeanddate.com/counters/year2000.html
    // Monday, 24 oct 2011, 20:17:33 UTC
    TimeUtils.jd_sse(2455859.345521) should be(372802653.015 plusOrMinus 1E-3)
  }

  it should "compute the correct Julian date for the year 1900-2100" in {
    // Fundamentals of Astrodynamics and Applications Example 3-4, page 190
    // Oct 26, 1996 2:20 PM UT == 2450383.09722222
    TimeUtils.jday(1996, 10, 26, 14, 20, 0) should be(2450383.09722222 plusOrMinus 1E-8)
  }

  it should "compute the correct sidereal time" in {
    // Fundamentals of Astrodynamics and Applications Example 3-5, page 194
    // August 20, 1992, 12:14 PM UT1 at 104° W long ==
    val jdut1 = TimeUtils.jday(1992, 8, 20, 12, 14, 0)
    val arr = TimeUtils.lstime(-104.0 * math.Pi / 180.0, jdut1)
    arr._1 should be(48.578787886  * (math.Pi / 180.0) plusOrMinus 1E-8)
    arr._2 should be(152.578787886 * (math.Pi / 180.0) plusOrMinus 1E-8)
  }

  it should "correctly convert radians to degrees/minutes/seconds" in {
    // Fundamentals of Astrodynamics and Applications Example 3-8, page 204
    // -35° -15m -53.63s == -0.6154886 rad
    val arr = TimeUtils.rad_dms(-0.6154886)
    arr._1 should equal(-35) // Degrees
    arr._2 should equal(-15) // Minutes
    arr._3 should be(-53.63 plusOrMinus 1E-2) // Seconds
  }

  it should "correctly convert radians to hours/minutes/seconds" in {
    // Fundamentals of Astrodynamics and Applications Example 3-9, page 205
    // 15h 15m 53.63s == 3.996341 rad
    val arr = TimeUtils.rad_hms(3.996341)
    arr._1 should equal(15) // Hour
    arr._2 should equal(15) // Minutes
    arr._3 should be(53.63 plusOrMinus 1E-2) // Seconds
  }

  it should "corrctly convert from seconds in a day to hours/minutes/secods in that day" in {
    // Fundamentals of Astrodynamics and Applications Example 3-10, page 206
    // 13h 22m 45.98s == 48165.98
    val arr = TimeUtils.sec_hms(48165.98)
    arr._1 should equal(13) // Hour
    arr._2 should equal(22) // Minutes
    arr._3 should be(45.98 plusOrMinus 1E-3) // Seconds
  }

}